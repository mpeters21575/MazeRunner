MAZE SOLVING STRATEGY GUIDE
===========================

Based on successful completion of Loops maze (122/122 points) vs failed Glasses attempt (0/272)

CRITICAL GAME MECHANICS LEARNED:
--------------------------------
1. COLLECTION IS MANDATORY FOR SCORING
   - Points accumulate "in hand" as you move to new positions
   - Points "in hand" are LOST when you exit the maze
   - Must use 'collect' command at positions where canCollectScoreHere=true
   - Collected points go to "bag" and are secured permanently
   - Only points in "bag" count toward final score

2. TRACKING ACCURACY IS ESSENTIAL
   - Server may reject moves that seem logical from our map
   - Never assume bidirectional connections
   - Use server response possibleMoves to determine actual available paths
   - Validate moves against current position's possibleMoves before attempting

MAP ANALYSIS & DECISION MAKING:
-------------------------------

RESPONSE ANALYSIS PATTERNS:
- possibleMoveActions[].rewardOnDestination: Points gained by moving there
- possibleMoveActions[].allowsScoreCollection: Can secure points at destination
- possibleMoveActions[].allowsExit: Can complete maze from destination
- possibleMoveActions[].hasBeenVisited: Avoid unless strategically necessary
- currentScoreInHand: Unsecured points (at risk of loss)
- currentScoreInBag: Secured points (safe)

EFFICIENT SOLVING APPROACH:
---------------------------

PHASE 1: EXPLORATION & MAPPING
- Systematically explore all reachable positions
- Prioritize unvisited positions (hasBeenVisited=false)
- Track collection points (allowsScoreCollection=true) locations
- Note exit points (allowsExit=true) for end-game planning
- Build complete map before optimizing collection strategy

PHASE 2: COLLECTION STRATEGY
- Don't hoard all points before first collection (risk of loss)
- Collect when reaching 50-100 points in hand (balance risk vs efficiency)
- Always collect before exploring risky/dead-end areas
- Collection points may be limited - use them strategically

PHASE 3: OPTIMIZATION & COMPLETION  
- After full exploration, calculate optimal collection sequence
- Minimize backtracking by collecting on logical path segments
- Ensure all rewardOnDestination points are claimed
- Exit only when currentScoreInBag equals maximum possible points

MOVEMENT DECISION LOGIC:
-----------------------
1. Check status response for current possibleMoveActions
2. For each possible move, evaluate:
   - rewardOnDestination (immediate value)
   - hasBeenVisited (exploration priority)
   - allowsScoreCollection (strategic value)
   - allowsExit (completion possibility)
3. Decision priority:
   a) Unvisited positions with highest rewards
   b) Collection points when hand > threshold (50-100)
   c) Exit points when bag = maximum possible score
   d) Backtrack to unexplored areas

ERROR PREVENTION:
----------------
- Always validate moves against server possibleMoves
- Don't assume maze symmetry or standard geometry
- Server state is truth - our tracking may have gaps
- Test moves with single commands rather than long sequences

SCORING EFFICIENCY:
------------------
- Target: 100% of listed "Potential rewards" for the maze
- Track: currentScoreInHand + currentScoreInBag vs target
- Collect strategically to minimize API calls while securing points
- Remember: "fewest API calls for same score wins"

KEY SUCCESS FACTORS:
-------------------
1. Understand collection mechanics (hand vs bag)
2. Server-response driven navigation (don't assume connections)
3. Strategic collection timing (not too early, not too late)
4. Complete exploration before optimization
5. Validate final score matches maze potential before exit

LESSONS FROM LOOPS MAZE SUCCESS:
-------------------------------
- Simple 15-tile maze with clear loop structure
- Multiple collection opportunities found and used
- Systematic exploration revealed all 122 potential points
- Strategic collection at midpoint (111 points) and before exit (11 points)
- Perfect execution: 122/122 points secured

The fixed tracking logic (server-response driven) was crucial for accurate mapping and successful navigation.

## Phase 1: Intelligent Exploration with Target Awareness

### Exploration Priority System
1. **Target-driven exploration**: Focus on finding points until target is reached
2. **Unexplored directions first**: Priority on `?` symbols for discovering new point sources
3. **Efficient point harvesting**: Use `numberOfVisitsToTile` data to balance revisiting
4. **Strategic stopping**: Once `currentScoreInBag` = target, exploration becomes optional

### Navigation Technique
- **Progress-aware movement**: Always know how close you are to target score
- **Risk vs reward**: Balance exploration with point securing based on gap to target
- **Efficiency focus**: Minimize moves per point collected
- **Smart revisiting**: Use neighbor visit counts to optimize point harvesting

### Exploration Validation
- **Target progress**: After each move, check progress toward target score
- **Efficiency tracking**: Monitor points collected per move
- **Completion check**: Stop when `currentScoreInBag` reaches target from list command
- **Optional thoroughness**: Continue exploration only if you want to map the entire maze

## Phase 2: Strategic Point Management

### Risk Assessment
- **Target-based risk**: Risk increases as you approach target score
- **Low Risk**: <25% of target in hand, Collection point accessible
- **Medium Risk**: 25-75% of target in hand, or Collection point >3 moves away  
- **High Risk**: >75% of target in hand, or uncertain Collection point access
- **Critical Risk**: Near target with significant points in hand

### Collection Timing
- **Immediate Collection**: When risk level is High or Critical
- **Strategic Collection**: Before exploring when close to target score
- **Milestone Collection**: At 25%, 50%, 75% of target achievement
- **Final Collection**: Ensure target score is secured before exit

### Point Optimization
- **Target-focused harvesting**: Prioritize collecting points until target is reached
- **Efficiency over completeness**: Stop revisiting when target achieved
- **Neighbor visit balancing**: Use `numberOfVisitsToTile` in possibleMoveActions for optimal revisiting
- **Reward density tracking**: Focus on high `rewardOnDestination` areas first
- **Strategic revisiting**: Balance new exploration with harvesting known areas

## Phase 3: Target Achievement Verification

### Completion Checklist
1. **Target Score Achieved**: `currentScoreInBag` equals "Potential rewards" from list
2. **Zero Risk**: `currentScoreInHand` is zero (all points secured)
3. **Mission Complete**: No further exploration required once target reached

### Pre-Exit Protocol
1. Verify `currentScoreInBag` = target score from list command
2. Ensure `currentScoreInHand` = 0 (all points secured)
3. Navigate to any available Exit point (`E` or `X` symbol)
4. Execute exit command with confidence

## Advanced Techniques

### Multi-Path Analysis
- When multiple `?` symbols available, analyze `possibleMoveActions` data
- Prioritize unexplored directions leading to `allowsScoreCollection: true`
- **Consider neighbor visit counts**: Use `numberOfVisitsToTile` to identify under-visited areas
- **Reward vs. Visit optimization**: Balance `rewardOnDestination` against `numberOfVisitsToTile`
- Factor in `hasBeenVisited: false` for areas with potential high rewards

### Efficiency Optimization
- Create mental map of Collection point locations for quick access
- Plan routes that minimize backtracking while maintaining safety
- **Visit balancing**: When choosing between explored directions, prefer neighbors with lower `numberOfVisitsToTile`
- **Reward density mapping**: Track which areas provide highest rewards per visit
- Use Exit points strategically (some may also be Collection points as `X`)
- Leverage neighbor visit data to balance revisiting vs new exploration

### Error Recovery
- If accidentally approaching Exit with points in hand, immediately backtrack
- Use `status` command when uncertain about current situation
- If lost, use confirmed connections to return to known Collection points
- When in doubt, secure points first, explore second

### Decision Framework

### At Each Position, Ask:
1. **Target Progress**: How close am I to the target score?
2. **Risk Level**: How many points am I risking in hand?
3. **Efficiency**: What's the best points-per-move option available?
4. **Security**: Should I secure points now or continue exploring?

### Decision Priority Order:
1. **Target Achievement**: If bag = target, mission complete!
2. **Risk Management**: Secure points if risk level is High/Critical
3. **Efficient Collection**: Move toward highest reward opportunities
4. **Strategic Exploration**: Explore new areas if target not yet reached

## Success Metrics
- **Target Achievement**: `currentScoreInBag` = "Potential rewards" from list
- **Zero Risk**: No points left in hand at completion
- **Efficiency**: Achieve target with minimal moves (secondary goal)

## Key Insight
**You don't need to explore every `?` symbol if you've already achieved the target score.** The list command tells you exactly when you're done!